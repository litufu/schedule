{"version":3,"sources":["../src/match.js"],"names":["DateStartTime","Date","getTimeByTimeZone","timeZone","d","localTime","getTime","localOffset","getTimezoneOffset","utc","offset","localSecondTime","date","birthdayToAge","day","birthday","age","getFullYear","getMonth","getDate","now","phase","parseInt","match","prisma","cities","lovecity","loveSignUps","where","AND","city","code","period","cityLoveSignUps","signUpPersons","citLoveSignUp","loveSignUp","id","person","loveSetting","grade","memeberGrade","memeberGradeEndTime","updateLoveSetting","data","newPerson","gender","myHeight","myWeight","otherAgeMin","otherAgeMax","otherHeightMin","otherHeightMax","otherWeightMin","otherWeightMax","push","sortedSignUpPersons","sort","a","b","matchedPersons","matcher","womanId","manId","indexOf","loveMatchings","woman","man","pastLoveMatchings","length","createLoveMatching","connect","personId","console","log"],"mappings":"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","sourcesContent":["/**\r\n * 每周四晚上12点执行。\r\n *思路：\r\n * 1、首先从数据库挑选出第一个城市里的所有用户\r\n * 2、对该城市的所有用户按照会员级别进行排序，得到一个用户列表\r\n * 3、从第一个用户开始计算匹配，匹配到计入数据库，并从列表中删除。\r\n * 4、该城市用户列表长度为0时停止\r\n * 5、将第一个用户所在城市从数据库中删除。挑选第二个用户所在城市，按照第一个城市算法计算。\r\n * 6、数据库长度为0时停止计算。\r\n * */\r\nimport \"@babel/polyfill\";\r\nimport { prisma } from '../generated/prisma-client'\r\n\r\nconst DateStartTime = new Date(2019,3,25)\r\nconst getTimeByTimeZone = (timeZone)=>{\r\n    const d=new Date();\r\n    const localTime = d.getTime()\r\n    const localOffset=d.getTimezoneOffset()*60000\r\n    const utc = localTime + localOffset\r\n    const offset = timeZone\r\n    const localSecondTime = utc + (3600000*offset) \r\n    const date = new Date(localSecondTime)\r\n    return date\r\n}\r\nconst birthdayToAge = (day)=>{\r\n    const birthday = new Date(day)\r\n    const d = new Date()\r\n    const age = d.getFullYear()-birthday.getFullYear()-((d.getMonth()<birthday.getMonth()|| d.getMonth()===birthday.getMonth() && d.getDate()<birthday.getDate())?1:0);\r\n    return age\r\n  }\r\n\r\n\r\n\r\n\r\nconst now = getTimeByTimeZone(8)\r\nconst phase = parseInt(`${(now.getTime() - DateStartTime.getTime()) / 1000 / 60 / 60 / 24 / 7}`, 10) + 1\r\nconst match = async () => {\r\n    const cities = await prisma.cities()\r\n    for (const lovecity of cities) {\r\n        // 1、找到该城市所有当期报名的人。\r\n        const cityLoveSignUps = await prisma.loveSignUps({\r\n            where: {\r\n                AND: [\r\n                    { city: { code: lovecity.code } },\r\n                    { period: `${phase}` }\r\n                ]\r\n            }\r\n        })\r\n        // 2、对该城市的所有用户按照会员级别进行排序，得到一个用户列表\r\n        const signUpPersons = []\r\n        for (const citLoveSignUp of cityLoveSignUps) {\r\n            const person = await prisma.loveSignUp({ id: citLoveSignUp.id }).person()\r\n            const loveSetting = await prisma.loveSignUp({ id: citLoveSignUp.id }).person().loveSetting()\r\n            // 计算会员等级\r\n            let grade = loveSetting.memeberGrade\r\n            // 如果会员等级为null，则grade为0\r\n            if (!loveSetting.memeberGrade) {\r\n                grade = 0\r\n            }\r\n            // 如果会员过期了，则grade为0\r\n            if (loveSetting.memeberGradeEndTime) {\r\n                if (new Date(loveSetting.memeberGradeEndTime) < new Date()) {\r\n                    await prisma.updateLoveSetting({\r\n                        where: { id: loveSetting.id },\r\n                        data: {\r\n                            memeberGrade: 0,\r\n                            memeberGradeEndTime: null,\r\n                        }\r\n                    })\r\n                    grade = 0\r\n                }\r\n            }\r\n\r\n            const newPerson = {\r\n                id: person.id,\r\n                gender: person.gender,\r\n                age: birthdayToAge(person.birthday),\r\n                myHeight: loveSetting.myHeight,\r\n                myWeight: loveSetting.myWeight,\r\n                otherAgeMin: loveSetting.otherAgeMin,\r\n                otherAgeMax: loveSetting.otherAgeMax,\r\n                otherHeightMin: loveSetting.otherHeightMin,\r\n                otherHeightMax: loveSetting.otherHeightMax,\r\n                otherWeightMin: loveSetting.otherWeightMin,\r\n                otherWeightMax: loveSetting.otherWeightMax,\r\n                memeberGrade: grade\r\n            }\r\n            signUpPersons.push(newPerson)\r\n        }\r\n        // 报名者按照等级从高到低排序\r\n        const sortedSignUpPersons = signUpPersons.sort((a, b) => b.memeberGrade - a.memeberGrade)\r\n        // 3、从第一个用户开始计算匹配，匹配到计入数据库。\r\n        const matchedPersons = []\r\n        for (const person of sortedSignUpPersons) {\r\n            for (const matcher of sortedSignUpPersons) {\r\n                let womanId\r\n                let manId\r\n                if (person.gender === \"male\") {\r\n                    manId = person.id\r\n                    womanId = matcher.id\r\n                } else {\r\n                    manId = matcher.id\r\n                    womanId = person.id\r\n                }\r\n                // 如果匹配成功\r\n                if (\r\n                    !~matchedPersons.indexOf(person.id) &&\r\n                    !~matchedPersons.indexOf(matcher.id) &&\r\n                    person.gender !== matcher.gender &&\r\n                    person.age >= matcher.otherAgeMin &&\r\n                    person.age <= matcher.otherAgeMax &&\r\n                    person.myHeight <= matcher.otherHeightMax &&\r\n                    person.myHeight >= matcher.otherHeightMin &&\r\n                    person.myWeight <= matcher.otherWeightMax &&\r\n                    person.myWeight >= matcher.otherWeightMin &&\r\n                    matcher.age >= person.otherAgeMin &&\r\n                    matcher.age <= person.otherAgeMax &&\r\n                    matcher.myHeight >= person.otherHeightMin &&\r\n                    matcher.myHeight <= person.otherHeightMax &&\r\n                    matcher.myWeight >= person.otherWeightMin &&\r\n                    matcher.myWeight <= person.otherWeightMax\r\n                ) {\r\n                    // 检查以前是否匹配成功过，匹配成功过的不再重复匹配\r\n                    const pastLoveMatchings = await prisma.loveMatchings({\r\n                        where:{\r\n                            AND:[\r\n                                {woman: {  id: womanId } },\r\n                                {man:  { id: manId } }\r\n                            ]\r\n                        }\r\n                    })\r\n                    if(pastLoveMatchings.length===0){\r\n                        matchedPersons.push(person.id)\r\n                        matchedPersons.push(matcher.id)\r\n                        await prisma.createLoveMatching({\r\n                            period: `${phase}`,\r\n                            city: { connect: { code: lovecity.code } },\r\n                            woman: { connect: { id: womanId } },\r\n                            man: { connect: { id: manId } }\r\n                        })\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            // 没有匹配成功,对象为null\r\n            const personId = person.id\r\n            if (!~matchedPersons.indexOf(person.id)) {\r\n                matchedPersons.push(personId)\r\n                if (person.gender === \"male\") {\r\n                    await prisma.createLoveMatching({\r\n                        period: `${phase}`,\r\n                        city: { connect: { code: lovecity.code } },\r\n                        man: { connect: { id: personId } }\r\n                    })\r\n                } else {\r\n                    await prisma.createLoveMatching({\r\n                        period: `${phase}`,\r\n                        city: { connect: { code: lovecity.code } },\r\n                        woman: { connect: { id: personId } },\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconsole.log('match start...')\r\nmatch()\r\nconsole.log('match over!')\r\n\r\n"],"file":"match.js"}